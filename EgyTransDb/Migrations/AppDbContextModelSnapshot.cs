// <auto-generated />
using System;
using EgyTransDb.OwenSystem.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EgyTransDb.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarDataTravelData", b =>
                {
                    b.Property<int>("CarsCarID")
                        .HasColumnType("int");

                    b.Property<int>("TravelDataTravelID")
                        .HasColumnType("int");

                    b.HasKey("CarsCarID", "TravelDataTravelID");

                    b.HasIndex("TravelDataTravelID");

                    b.ToTable("TravelCar", (string)null);
                });

            modelBuilder.Entity("DriverDataTravelData", b =>
                {
                    b.Property<int>("DriversDriverDataID")
                        .HasColumnType("int");

                    b.Property<int>("TravelDataTravelID")
                        .HasColumnType("int");

                    b.HasKey("DriversDriverDataID", "TravelDataTravelID");

                    b.HasIndex("TravelDataTravelID");

                    b.ToTable("TravelDriver", (string)null);
                });

            modelBuilder.Entity("EgyTransDb.OwenSystem.DBContext.Entites.CarData", b =>
                {
                    b.Property<int>("CarID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarID"));

                    b.Property<string>("CarDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarModel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarNum")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarPrand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CarPrincebyDay")
                        .HasColumnType("int");

                    b.Property<int>("CarPrincebyHour")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CarID");

                    b.ToTable("CarDatas");
                });

            modelBuilder.Entity("EgyTransDb.OwenSystem.DBContext.Entites.ClientData", b =>
                {
                    b.Property<int>("ClientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientID"));

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonsCount")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeOfContact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ClientID");

                    b.ToTable("ClientDatas");
                });

            modelBuilder.Entity("EgyTransDb.OwenSystem.DBContext.Entites.ClientTypeVisit", b =>
                {
                    b.Property<int>("TypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("TypeID");

                    b.ToTable("ClientTypes");
                });

            modelBuilder.Entity("EgyTransDb.OwenSystem.DBContext.Entites.DriverData", b =>
                {
                    b.Property<int>("DriverDataID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DriverDataID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DriverName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DriverPhone")
                        .HasColumnType("int");

                    b.Property<int>("DriverPrice")
                        .HasColumnType("int");

                    b.Property<int>("DriverTeps")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("DriverDataID");

                    b.ToTable("DriverDatas");
                });

            modelBuilder.Entity("EgyTransDb.OwenSystem.DBContext.Entites.SupplierData", b =>
                {
                    b.Property<int>("SupplieID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplieID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SupplierPhone")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("SupplieID");

                    b.ToTable("SupplierDatas");
                });

            modelBuilder.Entity("EgyTransDb.OwenSystem.DBContext.Entites.TourGuideClass", b =>
                {
                    b.Property<int>("GuideID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GuideID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("GuideName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Telphne")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("GuideID");

                    b.ToTable("TourGuides");
                });

            modelBuilder.Entity("EgyTransDb.OwenSystem.DBContext.Entites.TravelData", b =>
                {
                    b.Property<int>("TravelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TravelID"));

                    b.Property<int>("ClientID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("NetCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Profit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SellingPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TransferDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TypeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("TravelID");

                    b.HasIndex("ClientID");

                    b.HasIndex("TypeID");

                    b.ToTable("TravelDatas");
                });

            modelBuilder.Entity("EgyTransDb.OwenSystem.DBContext.Entites.TravelInfo", b =>
                {
                    b.Property<int>("TravelInfoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TravelInfoID"));

                    b.Property<DateTime>("AtDay")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransferFrom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransferTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TravelDataID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("TravelInfoID");

                    b.HasIndex("TravelDataID");

                    b.ToTable("TravelInfos");
                });

            modelBuilder.Entity("SupplierDataTravelData", b =>
                {
                    b.Property<int>("SuppliersSupplieID")
                        .HasColumnType("int");

                    b.Property<int>("TravelDataTravelID")
                        .HasColumnType("int");

                    b.HasKey("SuppliersSupplieID", "TravelDataTravelID");

                    b.HasIndex("TravelDataTravelID");

                    b.ToTable("TravelSupplier", (string)null);
                });

            modelBuilder.Entity("TourGuideClassTravelData", b =>
                {
                    b.Property<int>("TourGuidesGuideID")
                        .HasColumnType("int");

                    b.Property<int>("TravelDataTravelID")
                        .HasColumnType("int");

                    b.HasKey("TourGuidesGuideID", "TravelDataTravelID");

                    b.HasIndex("TravelDataTravelID");

                    b.ToTable("GuideID", (string)null);
                });

            modelBuilder.Entity("CarDataTravelData", b =>
                {
                    b.HasOne("EgyTransDb.OwenSystem.DBContext.Entites.CarData", null)
                        .WithMany()
                        .HasForeignKey("CarsCarID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EgyTransDb.OwenSystem.DBContext.Entites.TravelData", null)
                        .WithMany()
                        .HasForeignKey("TravelDataTravelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DriverDataTravelData", b =>
                {
                    b.HasOne("EgyTransDb.OwenSystem.DBContext.Entites.DriverData", null)
                        .WithMany()
                        .HasForeignKey("DriversDriverDataID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EgyTransDb.OwenSystem.DBContext.Entites.TravelData", null)
                        .WithMany()
                        .HasForeignKey("TravelDataTravelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EgyTransDb.OwenSystem.DBContext.Entites.TravelData", b =>
                {
                    b.HasOne("EgyTransDb.OwenSystem.DBContext.Entites.ClientData", "Client")
                        .WithMany()
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EgyTransDb.OwenSystem.DBContext.Entites.ClientTypeVisit", "Type")
                        .WithMany()
                        .HasForeignKey("TypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("EgyTransDb.OwenSystem.DBContext.Entites.TravelInfo", b =>
                {
                    b.HasOne("EgyTransDb.OwenSystem.DBContext.Entites.TravelData", null)
                        .WithMany("TravelInfos")
                        .HasForeignKey("TravelDataID");
                });

            modelBuilder.Entity("SupplierDataTravelData", b =>
                {
                    b.HasOne("EgyTransDb.OwenSystem.DBContext.Entites.SupplierData", null)
                        .WithMany()
                        .HasForeignKey("SuppliersSupplieID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EgyTransDb.OwenSystem.DBContext.Entites.TravelData", null)
                        .WithMany()
                        .HasForeignKey("TravelDataTravelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TourGuideClassTravelData", b =>
                {
                    b.HasOne("EgyTransDb.OwenSystem.DBContext.Entites.TourGuideClass", null)
                        .WithMany()
                        .HasForeignKey("TourGuidesGuideID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EgyTransDb.OwenSystem.DBContext.Entites.TravelData", null)
                        .WithMany()
                        .HasForeignKey("TravelDataTravelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EgyTransDb.OwenSystem.DBContext.Entites.TravelData", b =>
                {
                    b.Navigation("TravelInfos");
                });
#pragma warning restore 612, 618
        }
    }
}
